/**
 * @file     mcm.h (180.ARM_Peripherals/Project_Headers/mcm.h)
 * @brief    Miscellaneous Control Module
 */

#ifndef HEADER_MCM_H
#define HEADER_MCM_H

/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "pin_mapping.h"

// $/MCM/prototypes not found

namespace USBDM {

#if false // /MCM/_BasicInfoGuard

/**
 * @addtogroup MCM_Group MCM, Miscellaneous Control Module
 * @brief Abstraction for Miscellaneous Control Module
 * @{
 */
/**
 * Peripheral information for MCM, Miscellaneous Control Module.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
   /**
    * Each bit in the ASC field indicates whether there is a corresponding connection to the crossbar switch&amp;apos;s slave input port
    * (mcm_plasc_asc)
    *
    * 
    */
   enum McmPlascAsc : uint16_t {
      McmPlascAsc_ABusSlaveConnectionToAxbsInputPortNIsAbsent    = MCM_PLASC_ASC(0),  ///< A bus slave connection to AXBS input port n is absent
      McmPlascAsc_ABusSlaveConnectionToAxbsInputPortNIsPresent   = MCM_PLASC_ASC(1),  ///< A bus slave connection to AXBS input port n is present
   };

   /**
    * Each bit in the AMC field indicates whether there is a corresponding connection to the AXBS master input port
    * (mcm_plamc_amc)
    *
    * 
    */
   enum McmPlamcAmc : uint16_t {
      McmPlamcAmc_ABusMasterConnectionToAxbsInputPortNIsAbsent    = MCM_PLAMC_AMC(0),  ///< A bus master connection to AXBS input port n is absent
      McmPlamcAmc_ABusMasterConnectionToAxbsInputPortNIsPresent   = MCM_PLAMC_AMC(1),  ///< A bus master connection to AXBS input port n is present
   };

   /**
    * Arbitration select for the crossbar masters
    * (mcm_placr_arb)
    *
    * Arbitration select for the crossbar masters
    */
   enum McmArbitration {
      McmArbitration_FixedPriority   = MCM_PLACR_ARB(0),  ///< Fixed-priority
      McmArbitration_RoundRobin      = MCM_PLACR_ARB(1),  ///< Round-robin
   };

class McmBasicInfo {

public:
   // May be empty
}; // class McmBasicInfo 

class McmInfo : public McmBasicInfo {

public:
   /*
    * Template:mcm_mk11d5
    */
   //! Hardware base address as uint32_t
   static constexpr uint32_t baseAddress = MCM_BasePtr;
   
   //! Hardware base pointer
   static constexpr HardwarePtr<MCM_Type> mcm = baseAddress;
   
   /**
    * Set Arbitration select for the crossbar masters
    *
    * @param mcmArbitration Arbitration select for the crossbar masters
    */
   static void setCrossbarArbitration(McmArbitration mcmArbitration) {
   
      mcm->PLACR = (mcm->PLACR&~MCM_PLACR_ARB_MASK) | mcmArbitration;
   }

}; // class McmInfo



/**
 * Template class providing a base for Miscellaneous Control Module
 */
class McmBase : public McmInfo {

public:
// /MCM/DefaultFlashInitValue not found
// /MCM/DefaultSramAccessInitValue not found
// /MCM/DefaultFloatingPointIrqInitValue not found

};

   /**
    * Class representing MCM
    */
   using Mcm = McmBase;

/**
 * End MCM_Group
 * @}
 */
#endif // /MCM/_BasicInfoGuard
} // End namespace USBDM

#endif /* HEADER_MCM_H */
