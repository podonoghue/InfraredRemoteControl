/**
 * @file     crc.h (180.ARM_Peripherals/Project_Headers/crc.h)
 * @brief    External Watchdog Monitor
 */

#ifndef HEADER_CRC_H_
#define HEADER_CRC_H_

/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "derivative.h"
#include "pin_mapping.h"

// $/CRC/prototypes not found

namespace USBDM {

/**
 * @addtogroup CRC_Group CRC, Cyclic Redundancy Check
 * @brief Abstraction for Cyclic Redundancy Check
 * @{
 */
/**
 * Peripheral information for CRC, Cyclic Redundancy Check.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
   /**
    * CRC Polynomial
    * (crc_gpoly_gpoly)
    *
    * Polynomial used for the CRC calculation
    */
   enum CrcPolynomial : uint32_t {
   };

   /**
    * CRC Seed
    * (crc_data_data)
    *
    * Seed value used for the CRC calculation
    */
   enum CrcSeed : uint32_t {
   };

   /**
    * Type of Transpose For Writes
    * (crc_ctrl_tot)
    *
    * Define the transpose configuration for values written to the CRC data register
    * Controls transposition of bits within the bytes and bytes within the whole value
    */
   enum CrcWriteTranspose : uint32_t {
      CrcWriteTranspose_NoTransposition          = CRC_CTRL_TOT(0),  ///< No transposition
      CrcWriteTranspose_BitsTransposed           = CRC_CTRL_TOT(1),  ///< Bits transposed
      CrcWriteTranspose_BitsAndBytesTransposed   = CRC_CTRL_TOT(2),  ///< Bits and bytes transposed
      CrcWriteTranspose_BytesTransposed          = CRC_CTRL_TOT(3),  ///< Bytes transposed
   };

   /**
    * Type of Transpose For Read
    * (crc_ctrl_totr)
    *
    * Identify the transpose configuration of values read from the CRC Data register.
    * Controls transposition of bits within the bytes and bytes within the whole value
    */
   enum CrcReadTranspose : uint32_t {
      CrcReadTranspose_NoTransposition          = CRC_CTRL_TOTR(0),  ///< No transposition
      CrcReadTranspose_BitsTransposed           = CRC_CTRL_TOTR(1),  ///< Bits transposed
      CrcReadTranspose_BitsAndBytesTransposed   = CRC_CTRL_TOTR(2),  ///< Bits and bytes transposed
      CrcReadTranspose_BytesTransposed          = CRC_CTRL_TOTR(3),  ///< Bytes transposed
   };

   /**
    * Complement Read Of CRC Data Register
    * (crc_ctrl_fxor)
    *
    * Some CRC protocols require the final checksum to be XORed with 0xFFFFFFFF or 0xFFFF.
    * Asserting this bit enables on the fly complementing of read data
    */
   enum CrcReadComplement : uint32_t {
      CrcReadComplement_Normal     = CRC_CTRL_FXOR(0),  ///< No inversion
      CrcReadComplement_Inverted   = CRC_CTRL_FXOR(1),  ///< Invert read of data register
   };

   /**
    * Write CRC Data Register As Seed
    * (crc_ctrl_was)
    *
    * Selects between seed or data value when a value is written to the CRC data register
    */
   enum CrcWriteMode : uint32_t {
      CrcWriteMode_WritesData   = CRC_CTRL_WAS(0),  ///< Writes are data values
      CrcWriteMode_WritesSeed   = CRC_CTRL_WAS(1),  ///< Writes are seed values
   };

   /**
    * Width of CRC protocol
    * (crc_ctrl_tcrc)
    *
    * Width used in CRC calculation
    */
   enum CrcWidth : uint32_t {
      CrcWidth_16BitCrc   = CRC_CTRL_TCRC(0),  ///< 16-bit CRC
      CrcWidth_32BitCrc   = CRC_CTRL_TCRC(1),  ///< 32-bit CRC
   };

class CrcBasicInfo {

public:
}; // class CrcBasicInfo 

class Crc0Info : public CrcBasicInfo {

public:
   /*
    * Template:crc0_0x40032000
    */
   /**
    *  Enable clock to Crc0
    */
   static void enableClock() {
      SIM->SCGC6 = SIM->SCGC6 | SIM_SCGC6_CRC_MASK;
   }
   
   /**
    *  Disable clock to Crc0
    */
   static void disableClock() {
      SIM->SCGC6 = SIM->SCGC6 & ~SIM_SCGC6_CRC_MASK;
   }
   
   //! Hardware base address as uint32_t
   static constexpr uint32_t baseAddress = CRC0_BasePtr;
   
   //! Hardware base pointer
   static constexpr HardwarePtr<CRC_Type> crc = baseAddress;
   
   //! Peripheral instance number
   static constexpr unsigned instance = 0;
   
}; // class Crc0Info





/**
 * End CRC_Group
 * @}
 */
} // End namespace USBDM

#endif /* HEADER_CRC_H_ */
